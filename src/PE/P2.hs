module P2 where

-- Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

-- 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

-- By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

import Data.Array

-- | simple fib function to test memoization
fibs :: (Num a, Eq a) => a -> a
fibs 0 = 1
fibs 1 = 1
fibs n = fibs (n - 1) + fibs (n - 2)

fibmemo :: Integer -> Integer
fibmemo n = arr ! n
  where arr = array (0, n) [(n', m n') | n' <- [0..n]]
        m 0 = 1
        m 1 = 1
        m nn = (arr ! (nn - 1)) + (arr ! (nn - 2))

-- pretty easy, this is fast too
-- answer
-- 4613732
-- (0.02 secs, 3681400 bytes)
answer = sum $ filter even [fibmemo x | x <- [0..50], fibmemo x < 4000000]
